{"version":3,"sources":["components/Overlay.js","components/Card.js","components/Logo.js","components/IconBar.js","components/Landing.js","App.js","serviceWorker.js","index.js"],"names":["Overlay","styled","div","spring","type","damping","stiffness","Logo","useState","initialColors","colors","setColors","useEffect","setTimeout","shuffle","ul","id","drag","map","background","li","key","layoutTransition","style","IconBar","position","top","width","height","textAlign","class","aria-hidden","padding","marginTop","Landing","Container","margin","Row","Col","fontSize","fontFamily","color","fontWeight","Button","variant","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oqBAEO,IAAMA,EAAUC,IAAOC,IAAV,K,GAYOD,IAAOC,IAAV,K,wXCRND,IAAOC,IAAV,IAQDF,G,wCCTRG,EAAS,CACXC,KAAM,SACNC,QAAS,GACTC,UAAW,KAsBAC,EAnBK,WAAO,IAAD,EACMC,mBAASC,GADf,mBACfC,EADe,KACPC,EADO,KAOtB,OAJAC,qBAAU,WACNC,YAAW,kBAAMF,EAAUG,kBAAQJ,MAAU,OAC9C,CAACA,IAGA,kBAAC,IAAOK,GAAR,CAAWC,GAAG,OAAOC,MAAI,GACpBP,EAAOQ,KAAI,SAAAC,GAAU,OAClB,kBAAC,IAAOC,GAAR,CACIC,IAAKF,EACLG,iBAAkBnB,EAClBoB,MAAO,CAAEJ,qBAOvBV,EAAgB,CAAC,UAAW,UAAW,UAAW,WC7BjD,SAASe,IACZ,OACI,oCACI,yBAAKR,GAAG,iBAAiBO,MAAO,CAAEE,SAAU,QAASC,IAAK,EAAGC,MAAO,QAASC,OAAQ,QAASC,UAAW,WACrG,kBAAC,EAAD,MACA,uBAAGC,MAAM,uBAAuBC,cAAY,OAAOR,MAAO,CAAES,QAAS,OAAQC,UAAW,UAAc,6BACtG,uBAAGH,MAAM,yBAAyBC,cAAY,OAAOR,MAAO,CAAES,QAAS,UAAc,6BACrF,uBAAGF,MAAM,qBAAqBC,cAAY,OAAOR,MAAO,CAAES,QAAS,UAAc,+B,kBCgBlFE,MAtBf,WACI,OACI,kBAACC,EAAA,EAAD,CAAWZ,MAAO,CAAES,QAAS,KAAMI,OAAO,UAAWH,UAAU,QAC3D,kBAACI,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,6BACI,yBAAKf,MAAO,CAAEgB,SAAU,SAAUC,WAAY,gBAAiBC,MAAO,uBAAtE,kBACA,yBAAKlB,MAAO,CAAEgB,SAAU,OAAQG,WAAY,IAAKD,MAAO,UAAxD,mBACA,yBAAKlB,MAAO,CAAEgB,SAAU,SAAUG,WAAY,IAAKT,UAAW,QAASQ,MAAO,qBAA9E,gCACA,yBAAKlB,MAAO,CAAEgB,SAAU,SAAUG,WAAY,IAAKT,UAAW,MAAOQ,MAAO,qBAA5E,iKAIJ,kBAACE,EAAA,EAAD,CAAQC,QAAQ,mBAAhB,qBCaLC,MAvBf,WACE,OACE,6BAWE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MAEA,kBAACrB,EAAD,QCXcsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fcd97bfb.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const Overlay = styled.div`\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    background-color: #fc5185;\n    overflow: hidden;\n    width: 100%;\n    height: 0;\n    border-radius: 10px;\n    transition: 0.5s ease;\n  `;\nexport const OverlayText = styled.div`\n    text-align:center;\n    color: white;\n    margin-top:35%;\n  `;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Overlay, OverlayText } from \"./Overlay\"\nimport { motion } from \"framer-motion\"\nimport { Col } from 'react-bootstrap';\n\nconst CardStyle = styled.div`\n    position: relative;\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n    height: 250px;\n    max-width: 100%;\n    border-radius: 10px;\n    transition: all 0.5s ease-in-out;\n    color: palevioletred;\n    &:hover ${Overlay} {\n      height: 100%;\n    }\n  `;\n\nexport function Card(props) {\n  return (\n    <Col sm=\"12\" lg=\"4\">\n      <motion.span variants={props.childVariants}>\n        <CardStyle>\n          <div>\n            <div className=\"card-image\">\n              <img src={props.project.imageSrc} />\n            </div>\n            <div className=\"card-text\">{props.project.name}</div>\n          </div>\n          <Overlay><OverlayText>View More</OverlayText></Overlay>\n        </CardStyle>\n      </motion.span>\n    </Col>\n  )\n}\n\n\n\n","import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { shuffle } from \"lodash\";\n\nconst spring = {\n    type: \"spring\",\n    damping: 20,\n    stiffness: 300\n};\n\nexport const Logo = () => {\n    const [colors, setColors] = useState(initialColors);\n\n    useEffect(() => {\n        setTimeout(() => setColors(shuffle(colors)), 2000);\n    }, [colors]);\n\n    return (\n        <motion.ul id=\"logo\" drag>\n            {colors.map(background => (\n                <motion.li\n                    key={background}\n                    layoutTransition={spring}\n                    style={{ background }}\n                />\n            ))}\n        </motion.ul>\n    );\n};\nexport default Logo\nconst initialColors = [\"#FF008C\", \"#D309E1\", \"#9C1AFF\", \"#7700FF\"];\n","import React from \"react\";\nimport Logo from \"./Logo\"\nexport function IconBar() {\n    return (\n        <>\n            <div id=\"#IconContainer\" style={{ position: \"fixed\", top: 0, width: \"3.5em\", height: \"100vh\", textAlign: \"center\" }}>\n                <Logo />\n                <i class=\"fa fa-linkedin fa-fw\" aria-hidden=\"true\" style={{ padding: \"10px\", marginTop: \"70vh\" }}></i><br />\n                <i class=\"fa fa-envelope-o fa-fw\" aria-hidden=\"true\" style={{ padding: \"10px\" }}></i><br />\n                <i class=\"fa fa-github fa-fw\" aria-hidden=\"true\" style={{ padding: \"10px\" }}></i><br />\n            </div>\n        </>\n    )\n}","import React from \"react\";\nimport { Container, Row, Col, Button } from \"react-bootstrap\"\n\nfunction Landing() {\n    return (\n        <Container style={{ padding: \"2%\", margin:\"4% auto\", marginTop:\"4em\" }}>\n            <Row>\n                <Col>\n                    <div>\n                        <div style={{ fontSize: \"1.1rem\", fontFamily: \"Overpass Mono\", color: \"rgb(136, 146, 176)\" }}>Hi, my name is</div>\n                        <div style={{ fontSize: \"6rem\", fontWeight: 500, color: \"black\" }}>Joshua Noronha.</div>\n                        <div style={{ fontSize: \"3.5rem\", fontWeight: 500, marginTop: \"0.4em\", color: \"rgb(110,110,110)\" }}>I am a Full Stack Developer.</div>\n                        <div style={{ fontSize: \"1.2rem\", fontWeight: 400, marginTop: \"1em\", color: \"rgb(110,110,110)\" }}>\n                            I'm a software engineer based in Mumbai specializing in building (and occasionally designing) exceptional websites, applications, and everything in between.\n                        </div>\n                    </div>\n                    <Button variant=\"outline-primary\">\n                        See Projects!\n                    </Button>\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nexport default Landing;","import React from \"react\";\nimport \"./App.css\";\nimport { CardList } from \"./components/CardList\"\nimport { IconBar } from \"./components/IconBar\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Landing  from \"./components/Landing\"\nfunction App() {\n  return (\n    <div>\n      {/* <div\n        style={{\n          width: \"100vw\",\n          height: \"140vh\",\n          backgroundColor: '#000000',\n          backgroundImage: 'linear-gradient(147deg, #000000 0%, #434343 74%)',\n        }}\n      /> */}\n      \n\n      <Landing/>\n      <Landing/>\n      <Landing/>\n\n      <IconBar />\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}