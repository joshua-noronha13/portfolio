{"version":3,"sources":["img/map.png","img/camping.png","App.js","serviceWorker.js","index.js","img/smart_street_lamp.png"],"names":["module","exports","App","Overlay","styled","div","OverlayText","Card","className","width","height","style","background","id","src","smart_street_lamp","satellite_image","camping","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,iC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,glCCkF5BC,MA3Ef,WACE,IAAMC,EAAUC,IAAOC,IAAV,KAYPC,EAAcF,IAAOC,IAAV,KAKXE,EAAOH,IAAOC,IAAV,IAWEF,GAKZ,OACE,6BACE,yBAAKK,UAAU,yBACb,kBAAC,IAAD,CACEC,MAAM,QACNC,OAAO,QACPC,MAAO,CACLC,WAAW,cAIjB,yBAAKJ,UAAU,UAAf,kBACA,yBAAKA,UAAU,aACb,wBAAIK,GAAG,WAAP,OAEA,kBAACN,EAAD,KACE,yBAAKC,UAAU,cACb,yBAAKM,IAAKC,OAEZ,yBAAKP,UAAU,aAAf,sBACA,kBAACL,EAAD,KAAS,kBAACG,EAAD,oBAEX,kBAACC,EAAD,KACE,yBAAKC,UAAU,cACb,yBAAKM,IAAKE,OAEZ,yBAAKR,UAAU,aAAf,4CACA,kBAACL,EAAD,KAAS,kBAACG,EAAD,oBAEX,kBAACC,EAAD,KACE,yBAAKC,UAAU,cACb,yBAAKM,IAAKG,OAEZ,yBAAKT,UAAU,aAAf,sBACA,kBAACL,EAAD,KAAS,kBAACG,EAAD,uBC/DCY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBEnInBhC,EAAOC,QAAU,IAA0B,gD","file":"static/js/main.572880c9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/map.c0eb1a54.png\";","module.exports = __webpack_public_path__ + \"static/media/camping.33bed616.png\";","import React from \"react\";\nimport \"./App.css\";\nimport Particles from \"react-particles-js\";\nimport styled from \"styled-components\";\nimport smart_street_lamp from \"./img/smart_street_lamp.png\"\nimport satellite_image from \"./img/map.png\"\nimport camping from \"./img/camping.png\"\nfunction App() {\n  const Overlay = styled.div`\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    background-color: #fc5185;\n    overflow: hidden;\n    width: 100%;\n    height: 0;\n    border-radius: 10px;\n    transition: 0.5s ease;\n  `;\n  const OverlayText = styled.div`\n    text-align:center;\n    color: white;\n    margin-top:35%;\n  `;\n  const Card = styled.div`\n    display: inline-block;\n    position: relative;\n    width: 31%;\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n    margin: 1%;\n    height: 250px;\n    border-radius: 10px;\n    background-color: white;\n    transition: all 0.5s ease-in-out;\n    color: palevioletred;\n    &:hover ${Overlay} {\n      height: 100%;\n    }\n  `;\n\n  return (\n    <div>\n      <div className=\"particle-js-container\">\n        <Particles\n          width=\"100vw\"\n          height=\"140vh\"\n          style={{\n            background: `#364f6b`\n          }}\n        />\n      </div>\n      <div className=\"random\">Hi, I'm Joshua</div>\n      <div className=\"container\">\n        <h1 id=\"heading\">ACD</h1>\n\n        <Card>\n          <div className=\"card-image\">\n            <img src={smart_street_lamp} />\n          </div>\n          <div className=\"card-text\">Smart Street Lamps</div>\n          <Overlay><OverlayText>View More</OverlayText></Overlay>\n        </Card>\n        <Card>\n          <div className=\"card-image\">\n            <img src={satellite_image} />\n          </div>\n          <div className=\"card-text\">Semantic Segmentation of Satellite Tiles</div>\n          <Overlay><OverlayText>View More</OverlayText></Overlay>\n        </Card>\n        <Card>\n          <div className=\"card-image\">\n            <img src={camping} />\n          </div>\n          <div className=\"card-text\">Smart Street Lamps</div>\n          <Overlay><OverlayText>View More</OverlayText></Overlay>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/smart_street_lamp.dd274aa0.png\";"],"sourceRoot":""}